---
- name: Install metrics
  shell: "ansible-playbook /usr/share/ansible/openshift-ansible/playbooks/byo/openshift-cluster/openshift-metrics.yml -e openshift_metrics_install_metrics=True -i openshift_inventory.cfg"
  delegate_to: "{{bastion_public_ip}}"
  remote_user: "{{amazon_user}}"
  ignore_errors: true
  become: false
  when: true
  async: 4500
  poll: 5

- name: Deploy shell in the box
  shell: "oc new-app docker.io/debianmaster/shellinabox -n default --name=shell -e SIAB_SCRIPT='https://gist.githubusercontent.com/debianmaster/a524dab8e4f2c20d1148a7647f3e38cf/raw/d32c955e56b0d96367687b3c1ba63fddade5b4ae/addusers.sh'"
  delegate_to: "{{master_public_ip}}"
  remote_user: "{{amazon_user}}"
  ignore_errors: true
  become: false

- name: Expose shell route
  shell: "oc expose svc shell -n default"
  delegate_to: "{{master_public_ip}}"
  remote_user: "{{amazon_user}}"
  ignore_errors: true
  become: false

- name: Add epel-release
  yum:
    name: http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    state: present
  delegate_to: "{{master_public_ip}}"
  remote_user: "{{amazon_user}}"    
  ignore_errors: true
  become: true

- name: Install certbot dependencies
  shell: "yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional"
  delegate_to: "{{master_public_ip}}"
  remote_user: "{{amazon_user}}"
  ignore_errors: true
  become: true
  

- name: install certbot and shellinabox
  yum:
    name:
      - "yum-utils"
      - "certbot"
    state: "present"
  become: true
  delegate_to: "{{master_public_ip}}"
  remote_user: "{{amazon_user}}"
  ignore_errors: true

- name: Scale router down to zero
  shell: "oc scale dc/router --replicas=0 -n default && sleep 3" 
  delegate_to: "{{master_public_ip}}"
  remote_user: "{{amazon_user}}"
  become: false
  ignore_errors: true

- name: Ansible check if certs are already provisioned
  stat:
    path: "/etc/letsencrypt/live/{{public_dns_zone}}"
  register: folder_to_check
  delegate_to: "{{master_public_ip}}"
  remote_user: "{{amazon_user}}"
  become: true 
  ignore_errors: false
  
- name: Get custom certs
  become: true
  ignore_errors: true
  delegate_to: "{{master_public_ip}}"
  remote_user: "{{amazon_user}}"  
  when: provision_ssl_certs and (not folder_to_check.stat.exists)
  command: "certbot certonly --standalone -d {{public_dns_zone}} -d hawkular.apps.{{public_dns_zone}} -d kibana.apps.{{public_dns_zone}} --email 9chakri@gmail.com --agree-tos -n"
  args: 
    chdir: "/home/{{amazon_user}}"
    creates: "/etc/letsencrypt/live/{{public_dns_zone}}"

- name: copy certs folder
  copy: src=/etc/letsencrypt/archive dest=/etc/origin/master/ remote_src=yes directory_mode=yes
  become: true
  ignore_errors: false
  delegate_to: "{{master_public_ip}}"
  remote_user: "{{amazon_user}}"       

- name: Scale router back to 1
  shell: "oc scale dc/router --replicas=1 -n default && sleep 3" 
  delegate_to: "{{master_public_ip}}"
  remote_user: "{{amazon_user}}"
  become: false
  ignore_errors: true  
  
- name: Download yq
  get_url:
    url: https://github.com/mikefarah/yq/releases/download/1.14.0/yq_linux_386
    dest: /usr/bin
    mode: 0755
  become: true 
  ignore_errors: true
  delegate_to: "{{master_public_ip}}"
  remote_user: "{{amazon_user}}"
  
- name: copy patch file for certs
  template:
    src: "../files/patch.yaml"
    dest: "~{{amazon_user}}/patch.yaml"
  delegate_to: "{{master_public_ip}}"
  remote_user: "{{amazon_user}}"
  ignore_errors: true 

- name: Move foo to bar
  command: creates="/etc/origin/master/master-config.yaml.bak" mv /etc/origin/master/master-config.yaml /etc/origin/master/master-config.yaml.bak
  remote_user: "{{amazon_user}}"
  ignore_errors: true
  become: true  
  delegate_to: "{{master_public_ip}}"
  
- name: patch master-config to include custom certs
  shell: "/usr/bin/yq_linux_386 m /etc/origin/master/master-config.yaml.bak /home/ec2-user/patch.yaml > /etc/origin/master/master-config.yaml"
  delegate_to: "{{master_public_ip}}"
  remote_user: "{{amazon_user}}"
  ignore_errors: true
  become: true

- name: restart atomic openshift service to pick new certs
  become: true
  delegate_to: "{{master_public_ip}}"
  remote_user: "{{amazon_user}}"  
  ignore_errors: false  
  systemd:
    state: restarted
    daemon_reload: yes
    name: atomic-openshift-master-api

- name: Disable AWS default storage class
  shell: "oc patch storageclass gp2 -p '{\"metadata\": {\"annotations\": {\"storageclass.kubernetes.io/is-default-class\": \"false\"}}}' -n openshift"
  delegate_to: "{{master_public_ip}}"
  remote_user: "{{amazon_user}}"
  become: false
  when: install_gluster
  ignore_errors: true

- name: Disable AWS default beta storage class
  shell: "oc patch storageclass gp2 -p '{\"metadata\": {\"annotations\": {\"storageclass.beta.kubernetes.io/is-default-class\": \"false\"}}}' -n openshift"
  delegate_to: "{{master_public_ip}}"
  remote_user: "{{amazon_user}}"
  become: false
  when: install_gluster
  ignore_errors: true

- name: Enable gluster default storage class
  shell: "oc patch storageclass glusterfs-storage -p '{\"metadata\": {\"annotations\": {\"storageclass.kubernetes.io/is-default-class\": \"true\"}}}' -n openshift"
  delegate_to: "{{master_public_ip}}"
  remote_user: "{{amazon_user}}"
  become: false
  when: install_gluster
  ignore_errors: true
